<?xml version="1.0" encoding="UTF-8" ?>
<class name="BulletServer" inherits="Node2D" version="3.2">
	<brief_description>
		Node2D based server for controlling Bullets.
	</brief_description>
	<description>
		Node2D based server for controlling Bullets. Handles all movement and collisions for bullets.
		Maintains bullets in recyclable pool for performance and keeping memory manageable.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="spawn_bullet">
			<return type="void">
			</return>
			<argument index="0" name="type" type="BulletType">
			</argument>
			<argument index="1" name="position" type="Vector2">
			</argument>
			<argument index="2" name="direction" type="Vector2">
			</argument>
			<description>
				Spawns a bullet of [code]type[/code] at [code]position[/code], headed in [code]direction[/code]. Uses an inactive bullet if available, and if not, recycles the current oldest bullet.
			</description>
		</method>
		<method name="spawn_volley">
			<return type="void">
			</return>
			<argument index="0" name="type" type="BulletType">
			</argument>
			<argument index="1" name="position" type="Vector2">
			</argument>
			<argument index="2" name="shots" type="Array">
			</argument>
			<description>
				Spawns a volley of bullets of [code]type[/code] at base position [code]position[/code], using the position offsets and directions specified in [code]shots[/code]. Simply calls [code]spawn_bullet[/code] for each bullet.
			</description>
		</method>
	</methods>
	<members>
		<member name="bullet_pool_size" type="int" setter="set_bullet_pool_size" getter="get_bullet_pool_size" default="1500">
			The maximum number of bullets the server can hold. Bullet spawn calls that would cause the total number of active bullets to exceed this amount recycle the oldest active bullet.
		</member>
		<member name="play_area_margin" type="int" setter="set_play_area_margin" getter="get_play_area_margin" default="0">
			The distance, in pixels, which a bullet can travel beyond the edge of the screen before it is deactivated.
		</member>
	</members>
	<signals>
		<signal name="collision_detected">
			<argument index="0" name="bullet" type="Bullet">
			</argument>
			<argument index="1" name="Collider" type="CollisionObject2D">
			</argument>
			<description>
				Emits when server detects a collision between a bullet and another object.
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
</class>
